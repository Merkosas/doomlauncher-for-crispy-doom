# Definimos una plantilla oculta con el script de compilación para reutilizarla.
.build_template: &build_script
  - pacman -Syu --noconfirm
  - pacman -S --noconfirm python python-pip python-pyqt6 binutils
  - pip install pyinstaller --break-system-packages
  # El nombre del archivo ahora incluirá la versión del tag o el nombre de la rama.
  - pyinstaller --onefile --windowed --name DoomLauncher-Linux-$CI_COMMIT_REF_SLUG doom_launcher_qt.py

stages:
  - build
  - release

# Este trabajo se ejecuta en cada commit a la rama 'main' para verificar
# que el código siempre compile correctamente.
build_main:
  stage: build
  script:
    - *build_script # Reutilizamos el script de compilación.
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# --- ESTE ES EL NUEVO TRABAJO PARA CREAR RELEASES ---
# Se ejecuta SOLAMENTE cuando se empuja un nuevo tag al repositorio.
create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creando Release para el tag $CI_COMMIT_TAG"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Lanzamiento automático de la versión $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    # 'needs' asegura que el trabajo 'build_for_release' se complete primero.
    # Los artefactos de ese trabajo estarán disponibles aquí.
    assets:
      links:
        - name: 'DoomLauncher-Linux-$CI_COMMIT_TAG'
          # Construimos una URL directa al artefacto del trabajo de compilación.
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/artifacts/${CI_COMMIT_REF_NAME}/raw/dist/DoomLauncher-Linux-${CI_COMMIT_REF_NAME}?job=build_for_release'
  rules:
    - if: $CI_COMMIT_TAG

# Trabajo de compilación que se ejecuta solo para los tags.
# El trabajo 'create_release' usará su artefacto.
build_for_release:
  stage: build
  script:
    - *build_script
  artifacts:
    paths:
      - dist/
    expire_in: 7 days
  rules:
    - if: $CI_COMMIT_TAG
